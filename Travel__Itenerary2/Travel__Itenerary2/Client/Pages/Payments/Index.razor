@page "/Payments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title"> Payments </h3>
<br />

<a href="/Payments/Create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    new Payments
</a>
<br />
<br />
<br />

@if (Payments == null)
{
    <div class="alert alert-info">Loading Payments...</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>BookingId</th>
                @*<th>FlightPrice</th>
                    <th>HotelPrice</th>
                    <th>PackagePrice</th>*@
                <th>Payment Description</th>
                <th>Payment Date</th>
                <th>StaffId</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Payments in Payments)
            {
                <tr>
                    <td>@Payments.BookingId</td>
                    @*<td>@Payments.Bookings.Flights.FlightPrice</td>
                        <td>@Payments.Bookings.Hotels.HotelPrice</td>
                        <td>@Payments.Bookings.Package.PackagePrice</td>*@
                    <td>@Payments.PayDescription</td>
                    <td>@Payments.PayDate.Date.ToString("dd MMMM yyyy")</td>
                    <td>@Payments.StaffId</td>





                    <td>
                        <a href="/Payments/view/@Payments.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Payments/edit/@Payments.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Payments.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <br>
    <br>
    <br>


}
@code {
    private List<Payments> Payments;
    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Payments = await _client.GetFromJsonAsync<List<Payments>>($"{Endpoints.PaymentsEndpoint}");

    }

    async Task Delete(int PaymentId)
    {
        var payment = Payments.First(q => q.Id == PaymentId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.PayDescription}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{PaymentId}");
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}

