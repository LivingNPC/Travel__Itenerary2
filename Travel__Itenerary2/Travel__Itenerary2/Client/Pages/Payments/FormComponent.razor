@inject HttpClient _client

<EditForm Model="@payment" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Bookings: </label>
        <div>
            <InputSelect @bind-Value="payment.BookingId" class="form-control">
                <option value="">-- Select Bookings --</option>
                @if (Bookings != null)
                {
                    foreach (var booking in Bookings)
                    {
<option value="@booking.Id">@booking.Flights.FlightName - @booking.Flights.FlightPrice ||  @booking.Package.PackageName - @booking.Package.PackagePrice || @booking.Hotels.HotelName - @booking.Hotels.HotelPrice</option>}
}
            </InputSelect>
            <ValidationMessage For="@(() => payment.BookingId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Staff: </label>
        <div>
            <InputSelect @bind-Value="payment.StaffId" class="form-control">
                <option value="">-- Select Staff --</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
<option value="@staff.Id">@staff.Name</option>}
}
            </InputSelect>
            <ValidationMessage For="@(() => payment.StaffId)" />
        </div>
    </div>


    <div class="form-group">
        <label>PayDescription: </label>
        <div>
            <InputText @bind-Value="@payment.PayDescription" class="form-control" />
            <ValidationMessage For="@(() => payment.PayDescription)" />
        </div>
    </div>

    <div class="form-group">
        <label>PayDate: </label>
        <div>
            <InputDate @bind-Value="@payment.PayDate" class="form-control" />
            <ValidationMessage For="@(() => payment.PayDate)" />
        </div>
    </div>

    
    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
</EditForm>

@code { 

    [Parameter] public Payments payment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Bookings> Bookings;
    private IList<Staff> Staffs;

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Bookings>>($"{Endpoints.BookingsEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffEndpoint}");
        //payment.DateOut = DateTime.Now;
    } }

