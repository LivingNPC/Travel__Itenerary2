@page "/Packages/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title"> Packages </h3>
<a href="/Packages/Create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create packages
</a>
<br />
<br />
<br />

@if (packages == null)
{
    <div class="alert alert-info">Loading Packages...</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>PackageAmount</th>
                <th>Description</th>
                <th>Package Start Date</th>
                <th>Package End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var packages in packages)
            {
                <tr>
                    <td>@packages.PackageName</td>
                    <td>@packages.PackagePrice</td>
                    <td>@packages.PackageDescription</td>
                    <td>@packages.PackageStart</td>
                    <td>@packages.PackageEnd</td>
                    <td>
                        <a href="/packages/view/@packages.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/packages/edit/@packages.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(packages.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Package> packages;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        packages = await _client.GetFromJsonAsync<List<Package>>($"{Endpoints.PackageEndpoint}");

    }

    async Task Delete(int PackageId)
    {
        var package = packages.First(q => q.Id == PackageId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {package.PackageName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PackageEndpoint}/{PackageId}");
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

}
