@page "/Customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title"> Customers </h3>
<a href="/Customers/Create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    new Customers
</a>
<br />
<br />
<br />

@if (Customers == null)
{
    <div class="alert alert-info">Loading Customers...</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>NRIC</th>
                <th>Address</th>
                <th>ContactNumber</th>
                <th>EmailAddress</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var Customers in Customers)
            {
                <tr>
                    <td>@Customers.NRIC</td>
                    <td>@Customers.Address</td>
                    <td>@Customers.ContactNumber</td>
                    <td>@Customers.EmailAddress</td>

                    <td>
                        <a href="/Customers/view/@Customers.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Customers/edit/@Customers.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Customers.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Customers> Customers;

    protected async override Task OnInitializedAsync()
    {

        Customers = await _client.GetFromJsonAsync<List<Customers>>($"{Endpoints.CustomersEndpoint}");

    }

    async Task Delete(int CustomerId)
    {
        var customer = Customers.First(q => q.Id == CustomerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.NRIC}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{CustomerId}");
            await OnInitializedAsync();
        }
    }
}
